#tag ClassProtected Class CustomSceneryPackageInherits AddOnImplements FolderTraversalCallbackInterface	#tag Method, Flags = &h0		Sub plotOnMap(g as Graphics, planet as integer, selected as Boolean)		  dim i as integer		  		  if selected then		    g.foreColor = &cffff00		  elseif pEnabled then		    g.ForeColor = &c00ff00		  else		    g.ForeColor = &cff0000		  end if		  		  select case planet		    		  case kPlanetEarth		    for i = 0 to uBound(pEarthDSFs)		      dim dsf as DSF = pEarthDSFs(i)		      g.drawRect(360 + (dsf.pLongitude * 2), 180 - (dsf.pLatitude * 2), 2, 2)		    next		    		    for i = 0 to uBound(pEarthENVs)		      dim env as ENV = pEarthENVs(i)		      g.drawRect(360 + (env.pLongitude * 2), 180 - (env.pLatitude * 2), 2, 2)		    next		    		  case kPlanetMars		    for i = 0 to uBound(pMarsDSFs)		      dim dsf as DSF = pMarsDSFs(i)		      g.drawRect(360 + (dsf.pLongitude * 2), 180 - (dsf.pLatitude * 2), 2, 2)		    next		    		    for i = 0 to uBound(pMarsENVs)		      dim env as ENV = pMarsENVs(i)		      g.drawRect(360 + (env.pLongitude * 2), 180 - (env.pLatitude * 2), 2, 2)		    next		  end select		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(name as String, folderItem as FolderItem, enabled as Boolean)		  // Calling the overridden superclass constructor.		  Super.Constructor(name, folderItem, enabled)		  		  // Build list of DSFs in this package		  dim earthNavFolder as FolderItem = folderItem.child("Earth nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Earth Nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Earth nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Earth Nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("earth nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("earth Nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("earth nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("earth Nav Data")		  if earthNavFolder.exists() then		    Utilities.traverseFolderStructure(me, earthNavFolder, true, false, kPlanetEarth)		  end if		  		  dim marsNavFolder as FolderItem = folderItem.child("Mars nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Mars Nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Mars nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("Mars Nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("mars nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("mars Nav data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("mars nav Data")		  if not earthNavFolder.exists() then earthNavFolder = folderItem.child("mars Nav Data")		  if marsNavFolder.exists() then		    Utilities.traverseFolderStructure(me, marsNavFolder, true, false, kPlanetMars)		  end if		  		  dim libraryFolderItem as FolderItem = folderItem.child("library.txt")		  if libraryFolderItem.exists() then		    pLibrary = new LibrarySceneryObject(libraryFolderItem)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub folderTraversalCallback(folderItem as FolderItem, data as variant)		  // Part of the FolderTraversalCallbackInterface interface.		  		  if DSF.isDSF(folderItem) then		    dim dsf as DSF		    dsf = new DSF(folderItem)		    		    select case data		    case kPlanetEarth		      pEarthDSFs.append(dsf)		    case kPlanetMars		      pMarsDSFs.append(dsf)		    end select		    		  elseif ENV.isENV(folderItem) then		    dim env as ENV		    env = new ENV(folderItem)		    		    select case data		    case kPlanetEarth		      pEarthENVs.append(env)		    case kPlanetMars		      pMarsENVs.append(env)		    end select		    		  elseif AirportDataSceneryObject.isAirportData(folderItem) then		    dim airportData as AirportDataSceneryObject		    airportData = new AirportDataSceneryObject(folderItem)		    		    select case data		    case kPlanetEarth		      pEarthAirportData = airportData		    case kPlanetMars		      pMarsAirportData = airportData		    end select		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hasDSFs(planet as integer) As boolean		  select case planet		  case kPlanetEarth		    return uBound(pEarthDSFs) > -1		  case kPlanetMars		    return uBound(pMarsDSFs) > -1		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub populateListBoxEntry(listBox as ListBox)		  // Part of the AddonInterface interface.		  super.populateListBoxEntry(listBox)		  		  if hasLibrary() then		    listBox.cell(listBox.lastIndex, 1) = "✓"		  end if		  if hasDSFs(kPlanetEarth) or hasENVs(kPlanetEarth) then		    listBox.cell(listBox.lastIndex, 2) = "✓"		  end if		  if hasDSFs(kPlanetMars) or hasENVs(kPlanetMars) then		    listBox.cell(listBox.lastIndex, 3) = "✓"		  end if		  if hasAirportData(kPlanetEarth) then		    listBox.cell(listBox.lastIndex, 4) = "✓"		  end if		  if hasAirportData(kPlanetMars) then		    listBox.cell(listBox.lastIndex, 5) = "✓"		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hasENVs(planet as integer) As boolean		  select case planet		  case kPlanetEarth		    return uBound(pEarthENVs) > 0		  case kPlanetMars		    return uBound(pMarsENVs) > 0		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub enable(enable as boolean)		  if enable <> pEnabled then		    super.enable(enable)		    		    dim destinationParent as FolderItem = CustomSceneryPackage.getRootFolder(enable)		    dim swapDestinationParent as FolderItem = CustomSceneryPackage.getRootFolder(not enable)		    		    moveItem(enable, destinationParent, swapDestinationParent)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hasLibrary() As boolean		  return pLibrary <> nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function hasAirportData(planet as integer) As boolean		  select case planet		  case kPlanetEarth		    return pEarthAirportData <> nil		  case kPlanetMars		    return pMarsAirportData <> nil		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getMinDistanceFrom(x as integer, y as integer) As double		  dim minDistance as double = 10000		  dim latitude as integer = (180 - y) / 2		  dim longitude as integer = (x - 360) / 2		  dim i as integer		  		  for i = 0 to uBound(pEarthDSFs)		    dim dsf as DSF = pEarthDSFs(i)		    dim distance as double = dsf.getDistanceFrom(latitude, longitude)		    if distance < minDistance then minDistance = distance		    if minDistance = 0 then return 0		  next		  		  for i = 0 to uBound(pEarthENVs)		    dim env as ENV = pEarthENVs(i)		    dim distance as double = env.getDistanceFrom(latitude, longitude)		    if distance < minDistance then minDistance = distance		    if minDistance = 0 then return 0		  next		  		  return minDistance		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub install(folderItem as FolderItem)		  // Check whether an item with the same name exists first		  if CustomSceneryPackage.getRootFolder().child(folderItem.name).exists then		    dim parameters() as string = array(folderItem.name)		    msgBox(App.processParameterizedString(wndMain.kErrorItemWithSameNameExists, parameters))		    return		  end if		  		  // Move the folder		  folderItem.moveFileTo(CustomSceneryPackage.getRootFolder())		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function isValid(folderItem as FolderItem) As boolean		  // It's a valid scenery package if it's a directory and certain files or folders exist inside it		  return folderItem.Directory and folderItem.name.left(1) <> "." and folderItem.name.left(1) <> "-" and _		  (folderItem.child("library.txt").exists or _		  folderItem.child("Earth nav data").exists or _		  folderItem.child("Earth Nav data").exists or _		  folderItem.child("Earth nav Data").exists or _		  folderItem.child("Earth Nav Data").exists or _		  folderItem.child("earth nav data").exists or _		  folderItem.child("earth Nav data").exists or _		  folderItem.child("earth nav Data").exists or _		  folderItem.child("earth Nav Data").exists or _		  folderItem.child("Mars nav data").exists or _		  folderItem.child("Mars Nav data").exists or _		  folderItem.child("Mars nav Data").exists or _		  folderItem.child("Mars Nav Data").exists or _		  folderItem.child("mars nav data").exists or _		  folderItem.child("mars Nav data").exists or _		  folderItem.child("mars nav Data").exists or _		  folderItem.child("mars Nav Data").exists)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function getRootFolder(enabledVersion as boolean = true) As FolderItem		  if (enabledVersion) then		    return App.pXPlaneFolder.child("Custom Scenery")		  else		    return App.pXPlaneFolder.child("Custom Scenery (disabled)")		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub initialiseXPlaneFolder()		  dim disabledFolder as FolderItem		  		  disabledFolder = CustomSceneryPackage.getRootFolder(false)		  if (not disabledFolder.exists) then		    disabledFolder.createAsFolder()		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function checkXPlaneFolder(folderItem as FolderItem) As Boolean		  return folderItem <> nil and folderItem.child("Custom Scenery").exists		End Function	#tag EndMethod	#tag Property, Flags = &h0		pEarthDSFs() As DSF	#tag EndProperty	#tag Property, Flags = &h0		pMarsDSFs() As DSF	#tag EndProperty	#tag Property, Flags = &h0		pEarthENVs() As ENV	#tag EndProperty	#tag Property, Flags = &h0		pMarsENVs() As ENV	#tag EndProperty	#tag Property, Flags = &h0		pLibrary As LibrarySceneryObject	#tag EndProperty	#tag Property, Flags = &h0		pEarthAirportData As AirportDataSceneryObject	#tag EndProperty	#tag Property, Flags = &h0		pMarsAirportData As AirportDataSceneryObject	#tag EndProperty	#tag Constant, Name = kTypeLibraryOnly, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = kTypeLocational, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = kTypeLibraryAndLocational, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = kTypeUnknown, Type = Double, Dynamic = False, Default = \"-1", Scope = Public	#tag EndConstant	#tag Constant, Name = kPlanetEarth, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = kPlanetMars, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="pEnabled"			Group="Behavior"			InitialValue="true"			Type="Boolean"			InheritedFrom="AddOn"		#tag EndViewProperty		#tag ViewProperty			Name="pName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="AddOn"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass