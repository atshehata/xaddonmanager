#tag ClassProtected Class PluginInherits AddOn	#tag Method, Flags = &h0		Sub enable(enable as boolean)		  if enable <> pEnabled then		    super.enable(enable)		    		    dim destinationParent as FolderItem = App.getPluginsFolder(enable)		    dim swapDestinationParent as FolderItem = App.getPluginsFolder(not enable)		    		    moveItem(enable, destinationParent, swapDestinationParent)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub install(folderItem as FolderItem)		  // We are passed the actual plugin (be it a file or a folder containing a fat plugin).  However, we need to install		  // everything in the PARENT folder so that we grab any additional resources that may be needed by the plugin		  dim i as integer		  		  dim parentFolderItem as FolderItem = folderItem.Parent		  		  // Check whether any items with the same names exist first		  for i = 1 to parentFolderItem.count		    dim subItem as FolderItem = parentFolderItem.trueItem(i)		    if App.getPluginsFolder().child(subItem.name).exists then		      dim parameters() as string = array(subItem.name)		      msgBox(App.processParameterizedString(wndMain.kErrorItemWithSameNameExists, parameters))		      return		    end if		  next		  		  // Move the files and folders		  for i = 1 to parentFolderItem.count		    parentFolderItem.trueItem(i).moveFileTo(App.getPluginsFolder())		  next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function isValid(folderItem as FolderItem) As boolean		  // Hidden files and folders are rejected		  if folderItem.name.left(1) = "." then return false		  		  // Check for a fat plugin		  if  folderItem.Directory and ((TargetMacOS and folderItem.child("mac.xpl").exists) or (TargetLinux and folderItem.child("lin.xpl").exists) or (TargetWin32 and folderItem.child("win.xpl").exists)) then		    return true		  end if		  		  // If not fat, then it must have a file extension		  if folderItem.name.right(4) <> ".xpl" then return false		  		  // Only Mac could be a directory		  if folderItem.Directory and not TargetMacOS then return false		  		  dim pluginFolderItem as FolderItem		  if folderItem.Directory then		    // Mac plugin that is a folder (Mac Package)		    pluginFolderItem = folderItem.child("Contents").child("MacOS").child("mac")		  else		    // A simple file		    pluginFolderItem = folderItem		  end if		  		  dim bs as BinaryStream = pluginFolderItem.OpenAsBinaryFile(false)		  dim header as String = Utilities.binToHex(bs.Read(8), "")		  		  if TargetMacOS then		    return header = kMacHeader		  elseif TargetLinux then		    return header = kLinuxHeader		  elseif TargetWin32 then		    return header = kWindowsHeader		  else		    return false		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub doubleClicked()		  // Launch our parent folderItem		  pFolderItem.parent.launch()		End Sub	#tag EndMethod	#tag Constant, Name = kMacHeader, Type = String, Dynamic = False, Default = \"CAFEBABE00000002", Scope = Public	#tag EndConstant	#tag Constant, Name = kLinuxHeader, Type = String, Dynamic = False, Default = \"7F454C4601010100", Scope = Public	#tag EndConstant	#tag Constant, Name = kWindowsHeader, Type = String, Dynamic = False, Default = \"4D5A900003000000", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="pEnabled"			Group="Behavior"			InitialValue="true"			Type="Boolean"			InheritedFrom="AddOn"		#tag EndViewProperty		#tag ViewProperty			Name="pName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="AddOn"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass