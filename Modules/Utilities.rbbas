#tag ModuleProtected Module Utilities	#tag Method, Flags = &h0		Function binToHex(binaryString as string, separator as string = " ") As string		  dim result as string		  dim i as integer		  		  result = ""		  For i = 1 to LenB(binaryString)		    result = result + Right("0" + Hex(Asc(MidB(binaryString, i, 1))), 2) + separator		  next		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub deleteContentsOfFolder(folder as FolderItem)		  // Code from http://ramblings.aaronballman.com/2005/04/How_to_Delete_a_Folder.html		  		  dim i, count as Integer		  count = folder.Count		  		  for i = 1 to count // Check to see if the item is a directory		    if folder.TrueItem( 1 ).Directory then		      deleteContentsOfFolder( folder.TrueItem(1) )		    end if		    folder.TrueItem( 1 ).Delete		  next i		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function escapeSQLData(data as string) As string		  // Prepare a string for use in a SQL statement.  A string which is being		  // placed into a SQL statement cannot have a single quote in it since that will		  // make the database engine believe the string is finished.		  // For example the word "can't" will not work in SQL because it will see the word		  // as just "can".		  // In order to get around this you must escape all single quotes by adding a second		  // one.  So "can't" will become "can''t" and then SQL command will work.		  		  // Replace all single quotes with two single quote characters		  data = replaceAll( data, "'", "''" )		  		  // Return the new data which is ready to be used in SQL		  return data		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function hexToBin(hexString as String, separator as string = " ") As string		  dim result as string		  dim i as integer		  dim characterLength as integer		  		  characterLength = len(separator) + 2		  		  result = ""		  for i = 1 to Len(hexString) step characterLength		    result = result + Chr(Val("&h" + MidB(hexString, i, 2)))		  next		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function isUserLocalAdministrator() As Boolean		  // Copyright Â© Aaron Ballman		  // Code from: http://ramblings.aaronballman.com/2006/10/Is_the_user_an_administrator.html		  		  #if TargetMacOS or TargetLinux		    return true		  #endif		  		  dim fReturn as Boolean = false		  dim dwStatus, dwAccessMask, dwAccessDesired, dwACLSize as Integer		  dim dwStructureSize as Integer = 20 'sizeof(PRIVILEGE_SET)		  dim pACL, psidAdmin as Integer		  dim hToken as Integer		  dim hImpersonationToken as Integer		  dim ps as new MemoryBlock( dwStructureSize )		  dim GenericMapping as new MemoryBlock( 16 )		  dim psdAdmin as Integer		  dim SystemSidAuthority as new MemoryBlock( 6 )		  		  SystemSidAuthority.Byte( 0 ) = 0		  SystemSidAuthority.Byte( 1 ) = 0		  SystemSidAuthority.Byte( 2 ) = 0		  SystemSidAuthority.Byte( 3 ) = 0		  SystemSidAuthority.Byte( 4 ) = 0		  SystemSidAuthority.Byte( 5 ) = 5		  		  		  // Determine if the current thread is running as a user that is a member		  // of the local admins group. To do this, create a security descriptor		  // that has a DACL which has an ACE that allows only local aministrators		  // access. Then, call AccessCheck with the current thread's token and the		  // security descriptor. It will say whether the user could access an object if		  // it had that security descriptor. Note: you do not need to actually		  // create the object. Just checking access against the security descriptor		  // alone will be sufficient.		  		  // AccessCheck() requires an impersonation token. We first get a		  // primary token and then create a duplicate impersonation token. The		  // impersonation token is not actually assigned to the thread, but is		  // used in the call to AccessCheck. Thus, this function itself never		  // impersonates, but does use the identity of the thread. If the		  // thread was impersonating already, this function uses that impersonation		  // context.		  		  Soft Declare Function GetCurrentThread Lib "Kernel32" () as Integer		  Soft Declare Function OpenThreadToken Lib "Advapi32" ( handle as Integer, access as Integer, _		  openAsSelf as Boolean, ByRef tokenHandle as Integer ) as Boolean		  Soft Declare Function GetLastError Lib "Kernel32" () as Integer		  Soft Declare Function OpenProcessToken Lib "Advapi32" ( handle as Integer, access as Integer, _		  ByRef tokenHandle as Integer ) as Boolean		  Soft Declare Function GetCurrentProcess Lib "Kernel32" () as Integer		  Soft Declare Function DuplicateToken Lib "Advapi32" ( existing as Integer, impersination as Integer, _		  ByRef dupe as Integer ) as Boolean		  Soft Declare Function AllocateAndInitializeSid Lib "Advapi32" ( authority as Ptr, count as Byte, _		  auth0 as Integer, auth1 as Integer, auth2 as Integer, auth3 as Integer, auth4 as Integer, _		  auth5 as Integer, auth6 as Integer, auth7 as Integer, ByRef sid as Integer ) as Boolean		  Soft Declare Function LocalAlloc Lib "Kernel32" ( flags as Integer, bytes as Integer ) as Integer		  Soft Declare Function InitializeSecurityDescriptor Lib "AdvApi32" ( desc as Integer, revision as Integer ) as Boolean		  Soft Declare Function GetLengthSid Lib "AdvApi32" ( sid as Integer ) as Integer		  Soft Declare Function InitializeAcl Lib "AdvApi32" ( acl as Integer, length as Integer, revision as Integer ) as Boolean		  Soft Declare Function AddAccessAllowedAce Lib "AdvApi32" ( acl as Integer, revision as Integer, access as Integer, sid as Integer ) as Boolean		  Soft Declare Function SetSecurityDescriptorDacl Lib "AdvApi32" ( desc as Integer, daclPresent as Boolean, _		  dacl as Integer, defaulted as Boolean ) as Boolean		  Soft Declare Sub SetSecurityDescriptorGroup Lib "AdvApi32" ( desc as Integer, group as Integer, defaulted as Boolean )		  Soft Declare Sub SetSecurityDescriptorOwner Lib "AdvApi32" ( desc as Integer, owner as Integer, defaulted as Boolean )		  Soft Declare Function IsValidSecurityDescriptor Lib "AdvApi32" ( desc as Integer ) as Boolean		  Soft Declare Function AccessCheck Lib "AdvApi32" ( desc as Integer, client as Integer, access as Integer, mapping as Ptr, _		  privSet as Ptr, ByRef privSetLength as Integer, ByRef grantedAccess as Integer, ByRef accessStatus as Integer ) as Boolean		  Soft Declare Sub LocalFree Lib "Kernel32" ( p as Integer )		  Soft Declare Sub CloseHandle Lib "Kernel32" ( handle as Integer )		  Soft Declare Sub FreeSid Lib "AdvApi32" ( sid as Integer )		  		  Const TOKEN_DUPLICATE = &h2		  Const TOKEN_QUERY = &h8		  Const ERROR_NO_TOKEN = 1008		  		  if not OpenThreadToken( GetCurrentThread(), TOKEN_DUPLICATE + TOKEN_QUERY, true, hToken ) then		    if not OpenProcessToken( GetCurrentProcess(), TOKEN_DUPLICATE + TOKEN_QUERY, hToken ) then		      goto cleanup		    end if		  end if		  		  Const SecurityImpersonation = 2		  if not DuplicateToken ( hToken, SecurityImpersonation, hImpersonationToken ) then		    goto cleanup		  end if		  		  // Create the binary representation of the well-known SID that		  // represents the local administrators group. Then create the		  // security descriptor and DACL with an ACE that allows only local admins		  // access. After that, perform the access check. This will determine whether		  // the current user is a local admin.		  Const SECURITY_BUILTIN_DOMAIN_RID = &h20		  Const DOMAIN_ALIAS_RID_ADMINS = &h220		  if not AllocateAndInitializeSid( SystemSidAuthority, 2, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS, 0, 0, 0, 0, 0, 0, psidAdmin ) then		    goto cleanup		  end if		  		  Const LPTR = &h40		  Const SECURITY_DESCRIPTOR_MIN_LENGTH = 20		  psdAdmin = LocalAlloc( LPTR, SECURITY_DESCRIPTOR_MIN_LENGTH )		  if psdAdmin = 0 then		    goto cleanup		  end if		  		  Const SECURITY_DESCRIPTOR_REVISION = 1		  if not InitializeSecurityDescriptor( psdAdmin, SECURITY_DESCRIPTOR_REVISION ) then		    goto cleanup		  end if		  		  // Compute size needed for the ACL.		  dwACLSize = 8 + 16 + GetLengthSid( psidAdmin ) - 4		  		  pACL = LocalAlloc( LPTR, dwACLSize )		  if pACL = 0 then		    goto cleanup		  end if		  		  Const ACL_REVISION2 = 2		  if not InitializeAcl( pACL, dwACLSize, ACL_REVISION2 ) then		    goto cleanup		  end if		  		  Const ACCESS_READ = &h1		  Const ACCESS_WRITE = &h2		  dwAccessMask= ACCESS_READ + ACCESS_WRITE		  		  if not AddAccessAllowedAce( pACL, ACL_REVISION2, dwAccessMask, psidAdmin ) then		    goto cleanup		  end if		  		  if not SetSecurityDescriptorDacl( psdAdmin, true, pACL, false ) then		    goto cleanup		  end if		  		  // AccessCheck validates a security descriptor somewhat; set the		  // group and owner so that enough of the security descriptor is filled out		  // to make AccessCheck happy.		  		  SetSecurityDescriptorGroup( psdAdmin, psidAdmin, false )		  SetSecurityDescriptorOwner( psdAdmin, psidAdmin, false )		  		  if not IsValidSecurityDescriptor( psdAdmin ) then		    goto cleanup		  end if		  		  dwAccessDesired = ACCESS_READ		  		  // Initialize GenericMapping structure even though you		  // do not use generic rights.		  GenericMapping.Long( 0 ) = ACCESS_READ		  GenericMapping.Long( 4 ) = ACCESS_WRITE		  GenericMapping.Long( 8 ) = 0		  GenericMapping.Long( 12 ) = ACCESS_READ + ACCESS_WRITE		  		  dim ret as Integer		  if not AccessCheck( psdAdmin, hImpersonationToken, dwAccessDesired, GenericMapping, ps, dwStructureSize, dwStatus, ret ) then		    dim err as Integer = GetLastError		    		    fReturn = false		    goto cleanup		  end if		  		  fReturn = ret <> 0		  		  cleanup:		  // Clean up.		  if pACL <> 0 then LocalFree( pACL )		  if psdAdmin <> 0 then LocalFree( psdAdmin )		  if psidAdmin <> 0 then FreeSid( psidAdmin )		  if hImpersonationToken <> 0 then CloseHandle( hImpersonationToken )		  if hToken <> 0 then CloseHandle( hToken )		  		  return fReturn		  		exception e as FunctionNotFoundException		  return true		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function normaliseFilePath(filePath as String) As String		  #if TargetMacOS		    return filePath.replaceAll(":", "/")		  #elseif TargetWin32		    return filePath.replaceAll("\", "/")		  #else		    return filePath		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub populateListBoxFromRecordSet(lb as ListBox, rs as RecordSet)		  // Populate the specified listbox with the data in the recordset		  // that is provided.  This will loop through the records in the		  // recordset and add rows to the listbox that contain the data		  // from the recordset.		  		  dim i as integer		  		  // Clear the order list		  lb.deleteAllRows		  		  // Loop until we reach the end of the recordset		  while not rs.eof		    lb.addRow ""// add a new row to the listbox		    		    // Loop through all of the fields in the recordset and add the data to the correct		    // column in the listbox		    for i = 1 to rs.fieldCount		      // The listbox Cell property is 0-based so we need to subtract 1 from the database field		      // number to get the correct correct column number.  This means field 1 is in column 0 of		      // the listbox.		      lb.cell( lb.lastIndex, i-1 ) = rs.idxField( i ).stringValue		    next		    		    rs.moveNext// move to the next record		  wend		  		  		  // If the listbox is set to be sorted by a particular column then we want to		  // sort the listbox contents after we populate it, so that they appear in the		  // correct order.		  if lb.sortedColumn > -1 then// the listbox is sorted by a column		    lb.sort// sort the listbox data using the current sort settings		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub reRunAsAdministrator()		  // Copyright Â© Aaron Ballman		  // Code from: http://ramblings.aaronballman.com/2007/03/uac_and_you.html		  		  #if TargetMacOS or TargetLinux		    return		  #endif		  		  Soft Declare Function ShellExecuteExW Lib "Shell32" ( info as Ptr ) as Boolean		  Soft Declare Function ShellExecuteExA Lib "Shell32" ( info as Ptr ) as Boolean		  		  dim info as new MemoryBlock( 15 * 4 )		  dim verb as new MemoryBlock( 32 )		  dim file as new MemoryBlock( 260 * 2 )		  		  info.Long( 0 ) = info.Size		  //info.Long( 8 ) = wndMain.Handle		  		  if System.IsFunctionAvailable( "ShellExecuteExW", "Shell32" ) then		    verb.WString( 0 ) = "runas"		    file.WString( 0 ) = App.ExecutableFile().AbsolutePath()		  else		    verb.CString( 0 ) = "runas"		    file.CString( 0 ) = App.ExecutableFile().AbsolutePath()		  end if		  info.Ptr( 12 ) = verb		  info.Ptr( 16 ) = file		  		  Const SW_SHOWNORMAL = 1		  info.Long( 28 ) = SW_SHOWNORMAL		  		  dim ret as Boolean		  if System.IsFunctionAvailable( "ShellExecuteExW", "Shell32" ) then		    ret = ShellExecuteExW( info )		  else		    ret = ShellExecuteExA( info )		  end if		  		  quit		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub traverseFolderStructure(callbackClass as FolderTraversalCallbackInterface, folderItem as FolderItem, callbackForFiles as boolean, callbackForFolders as boolean, data as variant)		  dim i, count as Integer		  count = folderItem.Count		  		  for i = 1 to count		    // Check to see if the item is a directory		    if folderItem.trueItem(i).Directory then		      if callbackForFolders then		        callbackClass.folderTraversalCallback(folderItem.trueItem(i), data)		      end if		      // Recurse		      traverseFolderStructure(callbackClass, folderItem.trueItem(i), callbackForFiles, callbackForFolders, data)		    else		      if callbackForFiles then		        callbackClass.folderTraversalCallback(folderItem.trueItem(i), data)		      end if		    end if		  next i		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function unencodeHTML(html as String) As String		  if (ubound(Utilities.pHTML) = -1) then		    Utilities.pHTML = kHTML.split(",")		    Utilities.pUTF8 = kUTF8.split(",")		  end if		  		  dim i, j as integer		  		  j = ubound(pHTML) - 1		  		  for i = 0 to j		    html = html.replaceAll(pHTML(i), pUTF8(i))		  next		  		  html = ReplaceAllB(html, "&#38;" ,chr(38))		  html = ReplaceAllB(html, "&#39;" ,chr(39))		  html = ReplaceAllB(html, "&#34;", chr(34))		  		  html = ReplaceAllB(html, "&#60;", chr(60))		  html = ReplaceAllB(html, "&#62;", chr(62))		  		  for i = 160 to 255		    html = html.ReplaceAllB("&#" + str(i) + ";", chr(i))		  next		  		  return html		End Function	#tag EndMethod	#tag Property, Flags = &h0		pHTML() As String	#tag EndProperty	#tag Property, Flags = &h0		pUTF8() As String	#tag EndProperty	#tag Constant, Name = kHTML, Type = String, Dynamic = False, Default = \"&Aacgr;\x2C&aacgr;\x2C&Aacute;\x2C&aacute;\x2C&Abreve;\x2C&abreve;\x2C&Acirc;\x2C&acirc;\x2C&acute;\x2C&Acy;\x2C&acy;\x2C&AElig;\x2C&aelig;\x2C&Agr;\x2C&agr;\x2C&Agrave;\x2C&agrave;\x2C&alefsym;\x2C&aleph;\x2C&Alpha;\x2C&alpha;\x2C&Amacr;\x2C&amacr;\x2C&amalg;\x2C&amp;\x2C&and;\x2C&ang;\x2C&ang90;\x2C&angmsd;\x2C&angsph;\x2C&angst;\x2C&Aogon;\x2C&aogon;\x2C&ap;\x2C&ape;\x2C&apos;\x2C&Aring;\x2C&aring;\x2C&ast;\x2C&asymp;\x2C&Atilde;\x2C&atilde;\x2C&Auml;\x2C&auml;\x2C&b.alpha;\x2C&b.beta;\x2C&b.chi;\x2C&b.Delta;\x2C&b.delta;\x2C&b.epsi;\x2C&b.epsis;\x2C&b.epsiv;\x2C&b.eta;\x2C&b.Gamma;\x2C&b.gamma;\x2C&b.gammad;\x2C&b.iota;\x2C&b.kappa;\x2C&b.kappav;\x2C&b.Lambda;\x2C&b.lambda;\x2C&b.mu;\x2C&b.nu;\x2C&b.Omega;\x2C&b.omega;\x2C&b.Phi;\x2C&b.phis;\x2C&b.phiv;\x2C&b.Pi;\x2C&b.pi;\x2C&b.piv;\x2C&b.Psi;\x2C&b.psi;\x2C&b.rho;\x2C&b.rhov;\x2C&b.Sigma;\x2C&b.sigma;\x2C&b.sigmav;\x2C&b.tau;\x2C&b.Theta;\x2C&b.thetas;\x2C&b.thetav;\x2C&b.Upsi;\x2C&b.upsi;\x2C&b.Xi;\x2C&b.xi;\x2C&b.zeta;\x2C&barwed;\x2C&Barwed;\x2C&bcong;\x2C&Bcy;\x2C&bcy;\x2C&bdquo;\x2C&becaus;\x2C&bepsi;\x2C&bernou;\x2C&Beta;\x2C&beta;\x2C&beth;\x2C&Bgr;\x2C&bgr;\x2C&blank;\x2C&blk12;\x2C&blk14;\x2C&blk34;\x2C&block;\x2C&bottom;\x2C&bowtie;\x2C&boxdl;\x2C&boxdL;\x2C&boxDl;\x2C&boxDL;\x2C&boxdr;\x2C&boxdR;\x2C&boxDr;\x2C&boxDR;\x2C&boxh;\x2C&boxH;\x2C&boxhd;\x2C&boxHd;\x2C&boxhD;\x2C&boxHD;\x2C&boxhu;\x2C&boxHu;\x2C&boxhU;\x2C&boxHU;\x2C&boxul;\x2C&boxuL;\x2C&boxUl;\x2C&boxUL;\x2C&boxur;\x2C&boxuR;\x2C&boxUr;\x2C&boxUR;\x2C&boxv;\x2C&boxV;\x2C&boxvh;\x2C&boxvH;\x2C&boxVh;\x2C&boxVH;\x2C&boxvl;\x2C&boxvL;\x2C&boxVl;\x2C&boxVL;\x2C&boxvr;\x2C&boxvR;\x2C&boxVr;\x2C&boxVR;\x2C&bprime;\x2C&breve;\x2C&brvbar;\x2C&bsim;\x2C&bsime;\x2C&bsol;\x2C&bull;\x2C&bump;\x2C&bumpe;\x2C&Cacute;\x2C&cacute;\x2C&cap;\x2C&Cap;\x2C&caret;\x2C&caron;\x2C&Ccaron;\x2C&ccaron;\x2C&Ccedil;\x2C&ccedil;\x2C&Ccirc;\x2C&ccirc;\x2C&Cdot;\x2C&cdot;\x2C&cedil;\x2C&cent;\x2C&CHcy;\x2C&chcy;\x2C&check;\x2C&Chi;\x2C&chi;\x2C&cir;\x2C&circ;\x2C&cire;\x2C&clubs;\x2C&colon;\x2C&colone;\x2C&comma;\x2C&commat;\x2C&comp;\x2C&compfn;\x2C&cong;\x2C&conint;\x2C&coprod;\x2C&copy;\x2C&copysr;\x2C&crarr;\x2C&cross;\x2C&cuepr;\x2C&cuesc;\x2C&cularr;\x2C&cup;\x2C&Cup;\x2C&cupre;\x2C&curarr;\x2C&curren;\x2C&cuvee;\x2C&cuwed;\x2C&dagger;\x2C&Dagger;\x2C&daleth;\x2C&darr;\x2C&dArr;\x2C&darr2;\x2C&dash;\x2C&dashv;\x2C&dblac;\x2C&Dcaron;\x2C&dcaron;\x2C&Dcy;\x2C&dcy;\x2C&deg;\x2C&Delta;\x2C&delta;\x2C&Dgr;\x2C&dgr;\x2C&dharl;\x2C&dharr;\x2C&diam;\x2C&diams;\x2C&die;\x2C&divide;\x2C&divonx;\x2C&DJcy;\x2C&djcy;\x2C&dlarr;\x2C&dlcorn;\x2C&dlcrop;\x2C&dollar;\x2C&Dot;\x2C&dot;\x2C&DotDot;\x2C&drarr;\x2C&drcorn;\x2C&drcrop;\x2C&DScy;\x2C&dscy;\x2C&Dstrok;\x2C&dstrok;\x2C&dtri;\x2C&dtrif;\x2C&DZcy;\x2C&dzcy;\x2C&Eacgr;\x2C&eacgr;\x2C&Eacute;\x2C&eacute;\x2C&Ecaron;\x2C&ecaron;\x2C&ecir;\x2C&Ecirc;\x2C&ecirc;\x2C&ecolon;\x2C&Ecy;\x2C&ecy;\x2C&Edot;\x2C&edot;\x2C&eDot;\x2C&EEacgr;\x2C&eeacgr;\x2C&EEgr;\x2C&eegr;\x2C&efDot;\x2C&Egr;\x2C&egr;\x2C&Egrave;\x2C&egrave;\x2C&egs;\x2C&ell;\x2C&els;\x2C&Emacr;\x2C&emacr;\x2C&empty;\x2C&emsp;\x2C&emsp13;\x2C&emsp14;\x2C&ENG;\x2C&eng;\x2C&ensp;\x2C&Eogon;\x2C&eogon;\x2C&epsi;\x2C&Epsilon;\x2C&epsilon;\x2C&epsis;\x2C&equals;\x2C&equiv;\x2C&erDot;\x2C&esdot;\x2C&Eta;\x2C&eta;\x2C&ETH;\x2C&eth;\x2C&Euml;\x2C&euml;\x2C&excl;\x2C&exist;\x2C&Fcy;\x2C&fcy;\x2C&female;\x2C&ffilig;\x2C&fflig;\x2C&ffllig;\x2C&filig;\x2C&flat;\x2C&fllig;\x2C&fnof;\x2C&forall;\x2C&fork;\x2C&frac12;\x2C&frac13;\x2C&frac14;\x2C&frac15;\x2C&frac16;\x2C&frac18;\x2C&frac23;\x2C&frac25;\x2C&frac34;\x2C&frac35;\x2C&frac38;\x2C&frac45;\x2C&frac56;\x2C&frac58;\x2C&frac78;\x2C&frasl;\x2C&frown;\x2C&gacute;\x2C&Gamma;\x2C&gamma;\x2C&gammad;\x2C&Gbreve;\x2C&gbreve;\x2C&Gcedil;\x2C&gcedil;\x2C&Gcirc;\x2C&gcirc;\x2C&Gcy;\x2C&gcy;\x2C&Gdot;\x2C&gdot;\x2C&ge;\x2C&gE;\x2C&gel;\x2C&ges;\x2C&Gg;\x2C&Ggr;\x2C&ggr;\x2C&gimel;\x2C&GJcy;\x2C&gjcy;\x2C&gl;\x2C&gnE;\x2C&gne;\x2C&gnsim;\x2C&grave;\x2C&gsdot;\x2C&gsim;\x2C&gt;\x2C&Gt;\x2C&gvnE;\x2C&hairsp;\x2C&half;\x2C&hamilt;\x2C&HARDcy;\x2C&hardcy;\x2C&harr;\x2C&hArr;\x2C&harrw;\x2C&Hcirc;\x2C&hcirc;\x2C&hearts;\x2C&hellip;\x2C&horbar;\x2C&Hstrok;\x2C&hstrok;\x2C&hybull;\x2C&hyphen;\x2C&Iacgr;\x2C&iacgr;\x2C&Iacute;\x2C&iacute;\x2C&Icirc;\x2C&icirc;\x2C&Icy;\x2C&icy;\x2C&idiagr;\x2C&Idigr;\x2C&idigr;\x2C&Idot;\x2C&IEcy;\x2C&iecy;\x2C&iexcl;\x2C&iff;\x2C&Igr;\x2C&igr;\x2C&Igrave;\x2C&igrave;\x2C&IJlig;\x2C&ijlig;\x2C&Imacr;\x2C&imacr;\x2C&image;\x2C&incare;\x2C&infin;\x2C&inodot;\x2C&inodot;\x2C&int;\x2C&intcal;\x2C&IOcy;\x2C&iocy;\x2C&Iogon;\x2C&iogon;\x2C&Iota;\x2C&iota;\x2C&iquest;\x2C&isin;\x2C&Itilde;\x2C&itilde;\x2C&Iukcy;\x2C&iukcy;\x2C&Iuml;\x2C&iuml;\x2C&Jcirc;\x2C&jcirc;\x2C&Jcy;\x2C&jcy;\x2C&Jsercy;\x2C&jsercy;\x2C&Jukcy;\x2C&jukcy;\x2C&Kappa;\x2C&kappa;\x2C&kappav;\x2C&Kcedil;\x2C&kcedil;\x2C&Kcy;\x2C&kcy;\x2C&Kgr;\x2C&kgr;\x2C&kgreen;\x2C&KHcy;\x2C&khcy;\x2C&KHgr;\x2C&khgr;\x2C&KJcy;\x2C&kjcy;\x2C&lAarr;\x2C&Lacute;\x2C&lacute;\x2C&lagran;\x2C&Lambda;\x2C&lambda;\x2C&lang;\x2C&laquo;\x2C&larr;\x2C&Larr;\x2C&lArr;\x2C&larr2;\x2C&larrhk;\x2C&larrlp;\x2C&larrtl;\x2C&Lcaron;\x2C&lcaron;\x2C&Lcedil;\x2C&lcedil;\x2C&lceil;\x2C&lcub;\x2C&Lcy;\x2C&lcy;\x2C&ldot;\x2C&ldquo;\x2C&ldquor;\x2C&le;\x2C&lE;\x2C&leg;\x2C&les;\x2C&lfloor;\x2C&lg;\x2C&Lgr;\x2C&lgr;\x2C&lhard;\x2C&lharu;\x2C&lhblk;\x2C&LJcy;\x2C&ljcy;\x2C&Ll;\x2C&Lmidot;\x2C&lmidot;\x2C&lnE;\x2C&lne;\x2C&lnsim;\x2C&lowast;\x2C&lowbar;\x2C&loz;\x2C&lozf;\x2C&lpar;\x2C&lrarr2;\x2C&lrhar2;\x2C&lrm;\x2C&lsaquo;\x2C&lsh;\x2C&lsim;\x2C&lsqb;\x2C&lsquo;\x2C&lsquor;\x2C&Lstrok;\x2C&lstrok;\x2C&lt;\x2C&Lt;\x2C&lthree;\x2C&ltimes;\x2C&ltri;\x2C&ltrie;\x2C&ltrif;\x2C&lvnE;\x2C&macr;\x2C&male;\x2C&malt;\x2C&map;\x2C&marker;\x2C&Mcy;\x2C&mcy;\x2C&mdash;\x2C&Mgr;\x2C&mgr;\x2C&micro;\x2C&mid;\x2C&middot;\x2C&minus;\x2C&minusb;\x2C&mldr;\x2C&mnplus;\x2C&models;\x2C&Mu;\x2C&mu;\x2C&mumap;\x2C&nabla;\x2C&Nacute;\x2C&nacute;\x2C&nap;\x2C&napos;\x2C&natur;\x2C&nbsp;\x2C&Ncaron;\x2C&ncaron;\x2C&Ncedil;\x2C&ncedil;\x2C&ncong;\x2C&Ncy;\x2C&ncy;\x2C&ndash;\x2C&ne;\x2C&nearr;\x2C&nequiv;\x2C&nexist;\x2C&nge;\x2C&nges;\x2C&Ngr;\x2C&ngr;\x2C&ngt;\x2C&nharr;\x2C&nhArr;\x2C&ni;\x2C&NJcy;\x2C&njcy;\x2C&nlarr;\x2C&nlArr;\x2C&nldr;\x2C&nle;\x2C&nles;\x2C&nlt;\x2C&nltri;\x2C&nltrie;\x2C&nmid;\x2C&not;\x2C&notin;\x2C&npar;\x2C&npr;\x2C&npre;\x2C&nrarr;\x2C&nrArr;\x2C&nrtri;\x2C&nrtrie;\x2C&nsc;\x2C&nsce;\x2C&nsim;\x2C&nsime;\x2C&nspar;\x2C&nsub;\x2C&nsubE;\x2C&nsube;\x2C&nsup;\x2C&nsupE;\x2C&nsupe;\x2C&Ntilde;\x2C&ntilde;\x2C&Nu;\x2C&nu;\x2C&num;\x2C&numero;\x2C&numsp;\x2C&nvdash;\x2C&nvDash;\x2C&nVdash;\x2C&nVDash;\x2C&nwarr;\x2C&Oacgr;\x2C&oacgr;\x2C&Oacute;\x2C&oacute;\x2C&oast;\x2C&ocir;\x2C&Ocirc;\x2C&ocirc;\x2C&Ocy;\x2C&ocy;\x2C&odash;\x2C&Odblac;\x2C&odblac;\x2C&odot;\x2C&OElig;\x2C&oelig;\x2C&ogon;\x2C&Ogr;\x2C&ogr;\x2C&Ograve;\x2C&ograve;\x2C&OHacgr;\x2C&ohacgr;\x2C&OHgr;\x2C&ohgr;\x2C&ohm;\x2C&olarr;\x2C&oline;\x2C&Omacr;\x2C&omacr;\x2C&Omega;\x2C&omega;\x2C&Omicron;\x2C&omicron;\x2C&ominus;\x2C&oplus;\x2C&or;\x2C&orarr;\x2C&order;\x2C&ordf;\x2C&ordm;\x2C&oS;\x2C&Oslash;\x2C&oslash;\x2C&osol;\x2C&Otilde;\x2C&otilde;\x2C&otimes;\x2C&Ouml;\x2C&ouml;\x2C&par;\x2C&para;\x2C&part;\x2C&Pcy;\x2C&pcy;\x2C&percnt;\x2C&period;\x2C&permil;\x2C&perp;\x2C&Pgr;\x2C&pgr;\x2C&PHgr;\x2C&phgr;\x2C&Phi;\x2C&phi;\x2C&phis;\x2C&phiv;\x2C&phmmat;\x2C&phone;\x2C&Pi;\x2C&pi;\x2C&piv;\x2C&planck;\x2C&plus;\x2C&plusb;\x2C&plusdo;\x2C&plusmn;\x2C&pound;\x2C&pr;\x2C&pre;\x2C&prime;\x2C&Prime;\x2C&prnsim;\x2C&prod;\x2C&prop;\x2C&prsim;\x2C&PSgr;\x2C&psgr;\x2C&Psi;\x2C&psi;\x2C&puncsp;\x2C&quest;\x2C&quot;\x2C&rAarr;\x2C&Racute;\x2C&racute;\x2C&radic;\x2C&rang;\x2C&raquo;\x2C&rarr;\x2C&Rarr;\x2C&rArr;\x2C&rarr2;\x2C&rarrhk;\x2C&rarrlp;\x2C&rarrtl;\x2C&rarrw;\x2C&Rcaron;\x2C&rcaron;\x2C&Rcedil;\x2C&rcedil;\x2C&rceil;\x2C&rcub;\x2C&Rcy;\x2C&rcy;\x2C&rdquo;\x2C&rdquor;\x2C&real;\x2C&rect;\x2C&reg;\x2C&rfloor;\x2C&Rgr;\x2C&rgr;\x2C&rhard;\x2C&rharu;\x2C&Rho;\x2C&rho;\x2C&rhov;\x2C&ring;\x2C&rlarr2;\x2C&rlhar2;\x2C&rlm;\x2C&rpar;\x2C&rsaquo;\x2C&rsh;\x2C&rsqb;\x2C&rsquo;\x2C&rsquor;\x2C&rthree;\x2C&rtimes;\x2C&rtri;\x2C&rtrie;\x2C&rtrif;\x2C&rx;\x2C&Sacute;\x2C&sacute;\x2C&samalg;\x2C&sbquo;\x2C&sbsol;\x2C&sc;\x2C&Scaron;\x2C&scaron;\x2C&sccue;\x2C&sce;\x2C&Scedil;\x2C&scedil;\x2C&Scirc;\x2C&scirc;\x2C&scnsim;\x2C&scsim;\x2C&Scy;\x2C&scy;\x2C&sdot;\x2C&sdotb;\x2C&sect;\x2C&semi;\x2C&setmn;\x2C&sext;\x2C&sfgr;\x2C&sfrown;\x2C&Sgr;\x2C&sgr;\x2C&sharp;\x2C&SHCHcy;\x2C&shchcy;\x2C&SHcy;\x2C&shcy;\x2C&shy;\x2C&Sigma;\x2C&sigma;\x2C&sigmaf;\x2C&sigmav;\x2C&sim;\x2C&sime;\x2C&smile;\x2C&SOFTcy;\x2C&softcy;\x2C&sol;\x2C&spades;\x2C&spar;\x2C&sqcap;\x2C&sqcup;\x2C&sqsub;\x2C&sqsube;\x2C&sqsup;\x2C&sqsupe;\x2C&squ;\x2C&square;\x2C&squf;\x2C&ssetmn;\x2C&ssmile;\x2C&sstarf;\x2C&star;\x2C&starf;\x2C&sub;\x2C&Sub;\x2C&subE;\x2C&sube;\x2C&subnE;\x2C&subne;\x2C&sum;\x2C&sung;\x2C&sup;\x2C&Sup;\x2C&sup1;\x2C&sup2;\x2C&sup3;\x2C&supE;\x2C&supe;\x2C&supnE;\x2C&supne;\x2C&szlig;\x2C&target;\x2C&Tau;\x2C&tau;\x2C&Tcaron;\x2C&tcaron;\x2C&Tcedil;\x2C&tcedil;\x2C&Tcy;\x2C&tcy;\x2C&tdot;\x2C&telrec;\x2C&Tgr;\x2C&tgr;\x2C&there4;\x2C&Theta;\x2C&theta;\x2C&thetas;\x2C&thetasym;\x2C&thetav;\x2C&THgr;\x2C&thgr;\x2C&thinsp;\x2C&thkap;\x2C&thksim;\x2C&THORN;\x2C&thorn;\x2C&tilde;\x2C&times;\x2C&timesb;\x2C&top;\x2C&tprime;\x2C&trade;\x2C&trie;\x2C&TScy;\x2C&tscy;\x2C&TSHcy;\x2C&tshcy;\x2C&Tstrok;\x2C&tstrok;\x2C&twixt;\x2C&Uacgr;\x2C&uacgr;\x2C&Uacute;\x2C&uacute;\x2C&uarr;\x2C&uArr;\x2C&uarr2;\x2C&Ubrcy;\x2C&ubrcy;\x2C&Ubreve;\x2C&ubreve;\x2C&Ucirc;\x2C&ucirc;\x2C&Ucy;\x2C&ucy;\x2C&Udblac;\x2C&udblac;\x2C&udiagr;\x2C&Udigr;\x2C&udigr;\x2C&Ugr;\x2C&ugr;\x2C&Ugrave;\x2C&ugrave;\x2C&uharl;\x2C&uharr;\x2C&uhblk;\x2C&ulcorn;\x2C&ulcrop;\x2C&Umacr;\x2C&umacr;\x2C&uml;\x2C&Uogon;\x2C&uogon;\x2C&uplus;\x2C&Upsi;\x2C&upsi;\x2C&upsih;\x2C&Upsilon;\x2C&upsilon;\x2C&urcorn;\x2C&urcrop;\x2C&Uring;\x2C&uring;\x2C&Utilde;\x2C&utilde;\x2C&utri;\x2C&utrif;\x2C&Uuml;\x2C&uuml;\x2C&varr;\x2C&vArr;\x2C&Vcy;\x2C&vcy;\x2C&vdash;\x2C&vDash;\x2C&Vdash;\x2C&veebar;\x2C&vellip;\x2C&verbar;\x2C&Verbar;\x2C&vltri;\x2C&vprime;\x2C&vprop;\x2C&vrtri;\x2C&vsubnE;\x2C&vsubne;\x2C&vsupnE;\x2C&vsupne;\x2C&Vvdash;\x2C&Wcirc;\x2C&wcirc;\x2C&wedgeq;\x2C&weierp;\x2C&wreath;\x2C&xcirc;\x2C&xdtri;\x2C&Xgr;\x2C&xgr;\x2C&xhArr;\x2C&xharr;\x2C&Xi;\x2C&xi;\x2C&xlArr;\x2C&xrArr;\x2C&xutri;\x2C&Yacute;\x2C&yacute;\x2C&YAcy;\x2C&yacy;\x2C&Ycirc;\x2C&ycirc;\x2C&Ycy;\x2C&ycy;\x2C&yen;\x2C&YIcy;\x2C&yicy;\x2C&YUcy;\x2C&yucy;\x2C&yuml;\x2C&Yuml;\x2C&Zacute;\x2C&zacute;\x2C&Zcaron;\x2C&zcaron;\x2C&Zcy;\x2C&zcy;\x2C&Zdot;\x2C&zdot;\x2C&Zeta;\x2C&zeta;\x2C&Zgr;\x2C&zgr;\x2C&ZHcy;\x2C&zhcy;\x2C&zwj;\x2C&zwnj;\x2C&euro;\x2C", Scope = Public	#tag EndConstant	#tag Constant, Name = kUTF8, Type = String, Dynamic = False, Default = \"\xCE\x86\x2C\xCE\xAC\x2C\xC3\x81\x2C\xC3\xA1\x2C\xC4\x82\x2C\xC4\x83\x2C\xC3\x82\x2C\xC3\xA2\x2C\xC2\xB4\x2C\xD0\x90\x2C\xD0\xB0\x2C\xC3\x86\x2C\xC3\xA6\x2C\xCE\x91\x2C\xCE\xB1\x2C\xC3\x80\x2C\xC3\xA0\x2C\xE2\x84\xB5\x2C\xE2\x84\xB5\x2C\xCE\x91\x2C\xCE\xB1\x2C\xC4\x80\x2C\xC4\x81\x2C\xE2\x88\x90\x2C&\x2C\xE2\x88\xA7\x2C\xE2\x88\xA0\x2C\xE2\x88\x9F\x2C\xE2\x88\xA1\x2C\xE2\x88\xA2\x2C\xE2\x84\xAB\x2C\xC4\x84\x2C\xC4\x85\x2C\xE2\x89\x88\x2C\xE2\x89\x8A\x2C\'\x2C\xC3\x85\x2C\xC3\xA5\x2C*\x2C\xE2\x89\x88\x2C\xC3\x83\x2C\xC3\xA3\x2C\xC3\x84\x2C\xC3\xA4\x2C\xCE\xB1\x2C\xCE\xB2\x2C\xCF\x87\x2C\xCE\x94\x2C\xCE\xB4\x2C\xCE\xB5\x2C\xCE\xB5\x2C\xCE\xB5\x2C\xCE\xB7\x2C\xCE\x93\x2C\xCE\xB3\x2C\xCF\x9C\x2C\xCE\xB9\x2C\xCE\xBA\x2C\xCF\xB0\x2C\xCE\x9B\x2C\xCE\xBB\x2C\xCE\xBC\x2C\xCE\xBD\x2C\xCE\xA9\x2C\xCF\x8E\x2C\xCE\xA6\x2C\xCF\x86\x2C\xCF\x95\x2C\xCE\xA0\x2C\xCF\x80\x2C\xCF\x96\x2C\xCE\xA8\x2C\xCF\x88\x2C\xCF\x81\x2C\xCF\xB1\x2C\xCE\xA3\x2C\xCF\x83\x2C\xCF\x82\x2C\xCF\x84\x2C\xCE\x98\x2C\xCE\xB8\x2C\xCF\x91\x2C\xCE\xA5\x2C\xCF\x85\x2C\xCE\x9E\x2C\xCE\xBE\x2C\xCE\xB6\x2C\xE2\x8A\xBC\x2C\xE2\x8C\x86\x2C\xE2\x89\x8C\x2C\xD0\x91\x2C\xD0\xB1\x2C\xE2\x80\x9E\x2C\xE2\x88\xB5\x2C\xE2\x88\x8D\x2C\xE2\x84\xAC\x2C\xCE\x92\x2C\xCE\xB2\x2C\xE2\x84\xB6\x2C\xCE\x92\x2C\xCE\xB2\x2C\xE2\x90\xA3\x2C\xE2\x96\x92\x2C\xE2\x96\x91\x2C\xE2\x96\x93\x2C\xE2\x96\x88\x2C\xE2\x8A\xA5\x2C\xE2\x8B\x88\x2C\xE2\x94\x90\x2C\xE2\x95\x95\x2C\xE2\x95\x96\x2C\xE2\x95\x97\x2C\xE2\x94\x8C\x2C\xE2\x95\x92\x2C\xE2\x95\x93\x2C\xE2\x95\x94\x2C\xE2\x94\x80\x2C\xE2\x95\x90\x2C\xE2\x94\xAC\x2C\xE2\x95\xA4\x2C\xE2\x95\xA5\x2C\xE2\x95\xA6\x2C\xE2\x94\xB4\x2C\xE2\x95\xA7\x2C\xE2\x95\xA8\x2C\xE2\x95\xA9\x2C\xE2\x94\x98\x2C\xE2\x95\x9B\x2C\xE2\x95\x9C\x2C\xE2\x95\x9D\x2C\xE2\x94\x94\x2C\xE2\x95\x98\x2C\xE2\x95\x99\x2C\xE2\x95\x9A\x2C\xE2\x94\x82\x2C\xE2\x95\x91\x2C\xE2\x94\xBC\x2C\xE2\x95\xAA\x2C\xE2\x95\xAB\x2C\xE2\x95\xAC\x2C\xE2\x94\xA4\x2C\xE2\x95\xA1\x2C\xE2\x95\xA2\x2C\xE2\x95\xA3\x2C\xE2\x94\x9C\x2C\xE2\x95\x9E\x2C\xE2\x95\x9F\x2C\xE2\x95\xA0\x2C\xE2\x80\xB5\x2C\xCB\x98\x2C\xC2\xA6\x2C\xE2\x88\xBD\x2C\xE2\x8B\x8D\x2C\\\x2C\xE2\x80\xA2\x2C\xE2\x89\x8E\x2C\xE2\x89\x8F\x2C\xC4\x86\x2C\xC4\x87\x2C\xE2\x88\xA9\x2C\xE2\x8B\x92\x2C\xE2\x81\x81\x2C\xCB\x87\x2C\xC4\x8C\x2C\xC4\x8D\x2C\xC3\x87\x2C\xC3\xA7\x2C\xC4\x88\x2C\xC4\x89\x2C\xC4\x8A\x2C\xC4\x8B\x2C\xC2\xB8\x2C\xC2\xA2\x2C\xD0\xA7\x2C\xD1\x87\x2C\xE2\x9C\x93\x2C\xCE\xA7\x2C\xCF\x87\x2C\xE2\x97\x8B\x2C\xCB\x86\x2C\xE2\x89\x97\x2C\xE2\x99\xA3\x2C:\x2C\xE2\x89\x94\x2C\x2C\x2C@\x2C\xE2\x88\x81\x2C\xE2\x88\x98\x2C\xE2\x89\x85\x2C\xE2\x88\xAE\x2C\xE2\x88\x90\x2C\xC2\xA9\x2C\xE2\x84\x97\x2C\xE2\x86\xB5\x2C\xE2\x9C\x97\x2C\xE2\x8B\x9E\x2C\xE2\x8B\x9F\x2C\xE2\x86\xB6\x2C\xE2\x88\xAA\x2C\xE2\x8B\x93\x2C\xE2\x89\xBC\x2C\xE2\x86\xB7\x2C\xC2\xA4\x2C\xE2\x8B\x8E\x2C\xE2\x8B\x8F\x2C\xE2\x80\xA0\x2C\xE2\x80\xA1\x2C\xE2\x84\xB8\x2C\xE2\x86\x93\x2C\xE2\x87\x93\x2C\xE2\x87\x8A\x2C\xE2\x80\x90\x2C\xE2\x8A\xA3\x2C\xCB\x9D\x2C\xC4\x8E\x2C\xC4\x8F\x2C\xD0\x94\x2C\xD0\xB4\x2C\xC2\xB0\x2C\xCE\x94\x2C\xCE\xB4\x2C\xCE\x94\x2C\xCE\xB4\x2C\xE2\x87\x83\x2C\xE2\x87\x82\x2C\xE2\x8B\x84\x2C\xE2\x99\xA6\x2C\xC2\xA8\x2C\xC3\xB7\x2C\xE2\x8B\x87\x2C\xD0\x82\x2C\xD1\x92\x2C\xE2\x86\x99\x2C\xE2\x8C\x9E\x2C\xE2\x8C\x8D\x2C$\x2C\xC2\xA8\x2C\xCB\x99\x2C\xE2\x83\x9C\x2C\xE2\x86\x98\x2C\xE2\x8C\x9F\x2C\xE2\x8C\x8C\x2C\xD0\x85\x2C\xD1\x95\x2C\xC4\x90\x2C\xC4\x91\x2C\xE2\x96\xBF\x2C\xE2\x96\xBE\x2C\xD0\x8F\x2C\xD1\x9F\x2C\xCE\x88\x2C\xCE\xAD\x2C\xC3\x89\x2C\xC3\xA9\x2C\xC4\x9A\x2C\xC4\x9B\x2C\xE2\x89\x96\x2C\xC3\x8A\x2C\xC3\xAA\x2C\xE2\x89\x95\x2C\xD0\xAD\x2C\xD1\x8D\x2C\xC4\x96\x2C\xC4\x97\x2C\xE2\x89\x91\x2C\xCE\x89\x2C\xCE\xAE\x2C\xCE\x97\x2C\xCE\xB7\x2C\xE2\x89\x92\x2C\xCE\x95\x2C\xCE\xB5\x2C\xC3\x88\x2C\xC3\xA8\x2C\xE2\x8B\x9D\x2C\xE2\x84\x93\x2C\xE2\x8B\x9C\x2C\xC4\x92\x2C\xC4\x93\x2C\xE2\x88\x85\x2C\xE2\x80\x83\x2C\xE2\x80\x84\x2C\xE2\x80\x85\x2C\xC5\x8A\x2C\xC5\x8B\x2C\xE2\x80\x82\x2C\xC4\x98\x2C\xC4\x99\x2C\xCE\xB5\x2C\xCE\x95\x2C\xCE\xB5\x2C\xE2\x88\x8A\x2C\x3D\x2C\xE2\x89\xA1\x2C\xE2\x89\x93\x2C\xE2\x89\x90\x2C\xCE\x97\x2C\xCE\xB7\x2C\xC3\x90\x2C\xC3\xB0\x2C\xC3\x8B\x2C\xC3\xAB\x2C!\x2C\xE2\x88\x83\x2C\xD0\xA4\x2C\xD1\x84\x2C\xE2\x99\x80\x2C\xEF\xAC\x83\x2C\xEF\xAC\x80\x2C\xEF\xAC\x84\x2C\xEF\xAC\x81\x2C\xE2\x99\xAD\x2C\xEF\xAC\x82\x2C\xC6\x92\x2C\xE2\x88\x80\x2C\xE2\x8B\x94\x2C\xC2\xBD\x2C\xE2\x85\x93\x2C\xC2\xBC\x2C\xE2\x85\x95\x2C\xE2\x85\x99\x2C\xE2\x85\x9B\x2C\xE2\x85\x94\x2C\xE2\x85\x96\x2C\xC2\xBE\x2C\xE2\x85\x97\x2C\xE2\x85\x9C\x2C\xE2\x85\x98\x2C\xE2\x85\x9A\x2C\xE2\x85\x9D\x2C\xE2\x85\x9E\x2C\xE2\x81\x84\x2C\xE2\x8C\xA2\x2C\xC7\xB5\x2C\xCE\x93\x2C\xCE\xB3\x2C\xCF\x9C\x2C\xC4\x9E\x2C\xC4\x9F\x2C\xC4\xA2\x2C\xC4\xA3\x2C\xC4\x9C\x2C\xC4\x9D\x2C\xD0\x93\x2C\xD0\xB3\x2C\xC4\xA0\x2C\xC4\xA1\x2C\xE2\x89\xA5\x2C\xE2\x89\xA7\x2C\xE2\x8B\x9B\x2C\xE2\x89\xA5\x2C\xE2\x8B\x99\x2C\xCE\x93\x2C\xCE\xB3\x2C\xE2\x84\xB7\x2C\xD0\x83\x2C\xD1\x93\x2C\xE2\x89\xB7\x2C\xE2\x89\xA9\x2C\xE2\x89\xA9\x2C\xE2\x8B\xA7\x2C`\x2C\xE2\x8B\x97\x2C\xE2\x89\xB3\x2C>\x2C\xE2\x89\xAB\x2C\xE2\x89\xA9\x2C\xE2\x80\x8A\x2C\xC2\xBD\x2C\xE2\x84\x8B\x2C\xD0\xAA\x2C\xD1\x8A\x2C\xE2\x86\x94\x2C\xE2\x87\x94\x2C\xE2\x86\xAD\x2C\xC4\xA4\x2C\xC4\xA5\x2C\xE2\x99\xA5\x2C\xE2\x80\xA6\x2C\xE2\x80\x95\x2C\xC4\xA6\x2C\xC4\xA7\x2C\xE2\x81\x83\x2C-\x2C\xCE\x8A\x2C\xCE\xAF\x2C\xC3\x8D\x2C\xC3\xAD\x2C\xC3\x8E\x2C\xC3\xAE\x2C\xD0\x98\x2C\xD0\xB8\x2C\xCE\x90\x2C\xCE\xAA\x2C\xCF\x8A\x2C\xC4\xB0\x2C\xD0\x95\x2C\xD0\xB5\x2C\xC2\xA1\x2C\xE2\x87\x94\x2C\xCE\x99\x2C\xCE\xB9\x2C\xC3\x8C\x2C\xC3\xAC\x2C\xC4\xB2\x2C\xC4\xB3\x2C\xC4\xAA\x2C\xC4\xAB\x2C\xE2\x84\x91\x2C\xE2\x84\x85\x2C\xE2\x88\x9E\x2C\xC4\xB1\x2C\xC4\xB1\x2C\xE2\x88\xAB\x2C\xE2\x8A\xBA\x2C\xD0\x81\x2C\xD1\x91\x2C\xC4\xAE\x2C\xC4\xAF\x2C\xCE\x99\x2C\xCE\xB9\x2C\xC2\xBF\x2C\xE2\x88\x88\x2C\xC4\xA8\x2C\xC4\xA9\x2C\xD0\x86\x2C\xD1\x96\x2C\xC3\x8F\x2C\xC3\xAF\x2C\xC4\xB4\x2C\xC4\xB5\x2C\xD0\x99\x2C\xD0\xB9\x2C\xD0\x88\x2C\xD1\x98\x2C\xD0\x84\x2C\xD1\x94\x2C\xCE\x9A\x2C\xCE\xBA\x2C\xCF\xB0\x2C\xC4\xB6\x2C\xC4\xB7\x2C\xD0\x9A\x2C\xD0\xBA\x2C\xCE\x9A\x2C\xCE\xBA\x2C\xC4\xB8\x2C\xD0\xA5\x2C\xD1\x85\x2C\xCE\xA7\x2C\xCF\x87\x2C\xD0\x8C\x2C\xD1\x9C\x2C\xE2\x87\x9A\x2C\xC4\xB9\x2C\xC4\xBA\x2C\xE2\x84\x92\x2C\xCE\x9B\x2C\xCE\xBB\x2C\xE2\x8C\xA9\x2C\xC2\xAB\x2C\xE2\x86\x90\x2C\xE2\x86\x9E\x2C\xE2\x87\x90\x2C\xE2\x87\x87\x2C\xE2\x86\xA9\x2C\xE2\x86\xAB\x2C\xE2\x86\xA2\x2C\xC4\xBD\x2C\xC4\xBE\x2C\xC4\xBB\x2C\xC4\xBC\x2C\xE2\x8C\x88\x2C{\x2C\xD0\x9B\x2C\xD0\xBB\x2C\xE2\x8B\x96\x2C\xE2\x80\x9C\x2C\xE2\x80\x9E\x2C\xE2\x89\xA4\x2C\xE2\x89\xA6\x2C\xE2\x8B\x9A\x2C\xE2\x89\xA4\x2C\xE2\x8C\x8A\x2C\xE2\x89\xB6\x2C\xCE\x9B\x2C\xCE\xBB\x2C\xE2\x86\xBD\x2C\xE2\x86\xBC\x2C\xE2\x96\x84\x2C\xD0\x89\x2C\xD1\x99\x2C\xE2\x8B\x98\x2C\xC4\xBF\x2C\xC5\x80\x2C\xE2\x89\xA8\x2C\xE2\x89\xA8\x2C\xE2\x8B\xA6\x2C\xE2\x88\x97\x2C_\x2C\xE2\x97\x8A\x2C\xE2\x9C\xA6\x2C(\x2C\xE2\x87\x86\x2C\xE2\x87\x8B\x2C\xE2\x80\x8E\x2C\xE2\x80\xB9\x2C\xE2\x86\xB0\x2C\xE2\x89\xB2\x2C[\x2C\xE2\x80\x98\x2C\xE2\x80\x9A\x2C\xC5\x81\x2C\xC5\x82\x2C<\x2C\xE2\x89\xAA\x2C\xE2\x8B\x8B\x2C\xE2\x8B\x89\x2C\xE2\x97\x83\x2C\xE2\x8A\xB4\x2C\xE2\x97\x82\x2C\xE2\x89\xA8\x2C\xC2\xAF\x2C\xE2\x99\x82\x2C\xE2\x9C\xA0\x2C\xE2\x86\xA6\x2C\xE2\x96\xAE\x2C\xD0\x9C\x2C\xD0\xBC\x2C\xE2\x80\x94\x2C\xCE\x9C\x2C\xCE\xBC\x2C\xC2\xB5\x2C\xE2\x88\xA3\x2C\xC2\xB7\x2C\xE2\x88\x92\x2C\xE2\x8A\x9F\x2C\xE2\x80\xA6\x2C\xE2\x88\x93\x2C\xE2\x8A\xA7\x2C\xCE\x9C\x2C\xCE\xBC\x2C\xE2\x8A\xB8\x2C\xE2\x88\x87\x2C\xC5\x83\x2C\xC5\x84\x2C\xE2\x89\x89\x2C\xC5\x89\x2C\xE2\x99\xAE\x2C\xC2\xA0\x2C\xC5\x87\x2C\xC5\x88\x2C\xC5\x85\x2C\xC5\x86\x2C\xE2\x89\x87\x2C\xD0\x9D\x2C\xD0\xBD\x2C\xE2\x80\x93\x2C\xE2\x89\xA0\x2C\xE2\x86\x97\x2C\xE2\x89\xA2\x2C\xE2\x88\x84\x2C\xE2\x89\xB1\x2C\xE2\x89\xB1\x2C\xCE\x9D\x2C\xCE\xBD\x2C\xE2\x89\xAF\x2C\xE2\x86\xAE\x2C\xE2\x87\x8E\x2C\xE2\x88\x8B\x2C\xD0\x8A\x2C\xD1\x9A\x2C\xE2\x86\x9A\x2C\xE2\x87\x8D\x2C\xE2\x80\xA5\x2C\xE2\x89\xB0\x2C\xE2\x89\xB0\x2C\xE2\x89\xAE\x2C\xE2\x8B\xAA\x2C\xE2\x8B\xAC\x2C\xE2\x88\xA4\x2C\xC2\xAC\x2C\xE2\x88\x89\x2C\xE2\x88\xA6\x2C\xE2\x8A\x80\x2C\xE2\x8B\xA0\x2C\xE2\x86\x9B\x2C\xE2\x87\x8F\x2C\xE2\x8B\xAB\x2C\xE2\x8B\xAD\x2C\xE2\x8A\x81\x2C\xE2\x8B\xA1\x2C\xE2\x89\x81\x2C\xE2\x89\x84\x2C\xE2\x88\xA6\x2C\xE2\x8A\x84\x2C\xE2\x8A\x88\x2C\xE2\x8A\x88\x2C\xE2\x8A\x85\x2C\xE2\x8A\x89\x2C\xE2\x8A\x89\x2C\xC3\x91\x2C\xC3\xB1\x2C\xCE\x9D\x2C\xCE\xBD\x2C#\x2C\xE2\x84\x96\x2C\xE2\x80\x87\x2C\xE2\x8A\xAC\x2C\xE2\x8A\xAD\x2C\xE2\x8A\xAE\x2C\xE2\x8A\xAF\x2C\xE2\x86\x96\x2C\xCE\x8C\x2C\xCF\x8C\x2C\xC3\x93\x2C\xC3\xB3\x2C\xE2\x8A\x9B\x2C\xE2\x8A\x9A\x2C\xC3\x94\x2C\xC3\xB4\x2C\xD0\x9E\x2C\xD0\xBE\x2C\xE2\x8A\x9D\x2C\xC5\x90\x2C\xC5\x91\x2C\xE2\x8A\x99\x2C\xC5\x92\x2C\xC5\x93\x2C\xCB\x9B\x2C\xCE\x9F\x2C\xCE\xBF\x2C\xC3\x92\x2C\xC3\xB2\x2C\xCE\x8F\x2C\xCF\x8E\x2C\xCE\xA9\x2C\xCF\x89\x2C\xE2\x84\xA6\x2C\xE2\x86\xBA\x2C\xE2\x80\xBE\x2C\xC5\x8C\x2C\xC5\x8D\x2C\xCE\xA9\x2C\xCF\x89\x2C\xCE\x9F\x2C\xCE\xBF\x2C\xE2\x8A\x96\x2C\xE2\x8A\x95\x2C\xE2\x88\xA8\x2C\xE2\x86\xBB\x2C\xE2\x84\xB4\x2C\xC2\xAA\x2C\xC2\xBA\x2C\xE2\x93\x88\x2C\xC3\x98\x2C\xC3\xB8\x2C\xE2\x8A\x98\x2C\xC3\x95\x2C\xC3\xB5\x2C\xE2\x8A\x97\x2C\xC3\x96\x2C\xC3\xB6\x2C\xE2\x88\xA5\x2C\xC2\xB6\x2C\xE2\x88\x82\x2C\xD0\x9F\x2C\xD0\xBF\x2C%\x2C.\x2C\xE2\x80\xB0\x2C\xE2\x8A\xA5\x2C\xCE\xA0\x2C\xCF\x80\x2C\xCE\xA6\x2C\xCF\x86\x2C\xCE\xA6\x2C\xCF\x86\x2C\xCF\x86\x2C\xCF\x95\x2C\xE2\x84\xB3\x2C\xE2\x98\x8E\x2C\xCE\xA0\x2C\xCF\x80\x2C\xCF\x96\x2C\xE2\x84\x8F\x2C+\x2C\xE2\x8A\x9E\x2C\xE2\x88\x94\x2C\xC2\xB1\x2C\xC2\xA3\x2C\xE2\x89\xBA\x2C\xE2\x89\xBC\x2C\xE2\x80\xB2\x2C\xE2\x80\xB3\x2C\xE2\x8B\xA8\x2C\xE2\x88\x8F\x2C\xE2\x88\x9D\x2C\xE2\x89\xBE\x2C\xCE\xA8\x2C\xCF\x88\x2C\xCE\xA8\x2C\xCF\x88\x2C\xE2\x80\x88\x2C\?\x2C\"\x2C\xE2\x87\x9B\x2C\xC5\x94\x2C\xC5\x95\x2C\xE2\x88\x9A\x2C\xE2\x8C\xAA\x2C\xC2\xBB\x2C\xE2\x86\x92\x2C\xE2\x86\xA0\x2C\xE2\x87\x92\x2C\xE2\x87\x89\x2C\xE2\x86\xAA\x2C\xE2\x86\xAC\x2C\xE2\x86\xA3\x2C\xE2\x86\x9D\x2C\xC5\x98\x2C\xC5\x99\x2C\xC5\x96\x2C\xC5\x97\x2C\xE2\x8C\x89\x2C}\x2C\xD0\xA0\x2C\xD1\x80\x2C\xE2\x80\x9D\x2C\xE2\x80\x9C\x2C\xE2\x84\x9C\x2C\xE2\x96\xAD\x2C\xC2\xAE\x2C\xE2\x8C\x8B\x2C\xCE\xA1\x2C\xCF\x81\x2C\xE2\x87\x81\x2C\xE2\x87\x80\x2C\xCE\xA1\x2C\xCF\x81\x2C\xCF\xB1\x2C\xCB\x9A\x2C\xE2\x87\x84\x2C\xE2\x87\x8C\x2C\xE2\x80\x8F\x2C)\x2C\xE2\x80\xBA\x2C\xE2\x86\xB1\x2C]\x2C\xE2\x80\x99\x2C\xE2\x80\x98\x2C\xE2\x8B\x8C\x2C\xE2\x8B\x8A\x2C\xE2\x96\xB9\x2C\xE2\x8A\xB5\x2C\xE2\x96\xB8\x2C\xE2\x84\x9E\x2C\xC5\x9A\x2C\xC5\x9B\x2C\xE2\x88\x90\x2C\xE2\x80\x9A\x2C\\\x2C\xE2\x89\xBB\x2C\xC5\xA0\x2C\xC5\xA1\x2C\xE2\x89\xBD\x2C\xE2\x89\xBD\x2C\xC5\x9E\x2C\xC5\x9F\x2C\xC5\x9C\x2C\xC5\x9D\x2C\xE2\x8B\xA9\x2C\xE2\x89\xBF\x2C\xD0\xA1\x2C\xD1\x81\x2C\xE2\x8B\x85\x2C\xE2\x8A\xA1\x2C\xC2\xA7\x2C;\x2C\xE2\x88\x96\x2C\xE2\x9C\xB6\x2C\xCF\x82\x2C\xE2\x8C\xA2\x2C\xCE\xA3\x2C\xCF\x83\x2C\xE2\x99\xAF\x2C\xD0\xA9\x2C\xD1\x89\x2C\xD0\xA8\x2C\xD1\x88\x2C\xC2\xAD\x2C\xCE\xA3\x2C\xCF\x83\x2C\xCF\x82\x2C\xCF\x82\x2C\xE2\x88\xBC\x2C\xE2\x89\x83\x2C\xE2\x8C\xA3\x2C\xD0\xAC\x2C\xD1\x8C\x2C/\x2C\xE2\x99\xA0\x2C\xE2\x88\xA5\x2C\xE2\x8A\x93\x2C\xE2\x8A\x94\x2C\xE2\x8A\x8F\x2C\xE2\x8A\x91\x2C\xE2\x8A\x90\x2C\xE2\x8A\x92\x2C\xE2\x96\xA1\x2C\xE2\x96\xA1\x2C\xE2\x96\xAA\x2C\xE2\x88\x96\x2C\xE2\x8C\xA3\x2C\xE2\x8B\x86\x2C\xE2\x98\x86\x2C\xE2\x98\x85\x2C\xE2\x8A\x82\x2C\xE2\x8B\x90\x2C\xE2\x8A\x86\x2C\xE2\x8A\x86\x2C\xE2\x8A\x8A\x2C\xE2\x8A\x8A\x2C\xE2\x88\x91\x2C\xE2\x99\xAA\x2C\xE2\x8A\x83\x2C\xE2\x8B\x91\x2C\xC2\xB9\x2C\xC2\xB2\x2C\xC2\xB3\x2C\xE2\x8A\x87\x2C\xE2\x8A\x87\x2C\xE2\x8A\x8B\x2C\xE2\x8A\x8B\x2C\xC3\x9F\x2C\xE2\x8C\x96\x2C\xCE\xA4\x2C\xCF\x84\x2C\xC5\xA4\x2C\xC5\xA5\x2C\xC5\xA2\x2C\xC5\xA3\x2C\xD0\xA2\x2C\xD1\x82\x2C\xE2\x83\x9B\x2C\xE2\x8C\x95\x2C\xCE\xA4\x2C\xCF\x84\x2C\xE2\x88\xB4\x2C\xCE\x98\x2C\xCE\xB8\x2C\xCE\xB8\x2C\xCF\x91\x2C\xCF\x91\x2C\xCE\x98\x2C\xCE\xB8\x2C\xE2\x80\x89\x2C\xE2\x89\x88\x2C\xE2\x88\xBC\x2C\xC3\x9E\x2C\xC3\xBE\x2C\xCB\x9C\x2C\xC3\x97\x2C\xE2\x8A\xA0\x2C\xE2\x8A\xA4\x2C\xE2\x80\xB4\x2C\xE2\x84\xA2\x2C\xE2\x89\x9C\x2C\xD0\xA6\x2C\xD1\x86\x2C\xD0\x8B\x2C\xD1\x9B\x2C\xC5\xA6\x2C\xC5\xA7\x2C\xE2\x89\xAC\x2C\xCE\x8E\x2C\xCF\x8D\x2C\xC3\x9A\x2C\xC3\xBA\x2C\xE2\x86\x91\x2C\xE2\x87\x91\x2C\xE2\x87\x88\x2C\xD0\x8E\x2C\xD1\x9E\x2C\xC5\xAC\x2C\xC5\xAD\x2C\xC3\x9B\x2C\xC3\xBB\x2C\xD0\xA3\x2C\xD1\x83\x2C\xC5\xB0\x2C\xC5\xB1\x2C\xCE\xB0\x2C\xCE\xAB\x2C\xCF\x8B\x2C\xCE\xA5\x2C\xCF\x85\x2C\xC3\x99\x2C\xC3\xB9\x2C\xE2\x86\xBF\x2C\xE2\x86\xBE\x2C\xE2\x96\x80\x2C\xE2\x8C\x9C\x2C\xE2\x8C\x8F\x2C\xC5\xAA\x2C\xC5\xAB\x2C\xC2\xA8\x2C\xC5\xB2\x2C\xC5\xB3\x2C\xE2\x8A\x8E\x2C\xCE\xA5\x2C\xCF\x85\x2C\xCF\x92\x2C\xCE\xA5\x2C\xCF\x85\x2C\xE2\x8C\x9D\x2C\xE2\x8C\x8E\x2C\xC5\xAE\x2C\xC5\xAF\x2C\xC5\xA8\x2C\xC5\xA9\x2C\xE2\x96\xB5\x2C\xE2\x96\xB4\x2C\xC3\x9C\x2C\xC3\xBC\x2C\xE2\x86\x95\x2C\xE2\x87\x95\x2C\xD0\x92\x2C\xD0\xB2\x2C\xE2\x8A\xA2\x2C\xE2\x8A\xA8\x2C\xE2\x8A\xA9\x2C\xE2\x8A\xBB\x2C\xE2\x8B\xAE\x2C|\x2C\xE2\x80\x96\x2C\xE2\x8A\xB2\x2C\xE2\x80\xB2\x2C\xE2\x88\x9D\x2C\xE2\x8A\xB3\x2C\xE2\x8A\x8A\x2C\xE2\x8A\x8A\x2C\xE2\x8A\x8B\x2C\xE2\x8A\x8B\x2C\xE2\x8A\xAA\x2C\xC5\xB4\x2C\xC5\xB5\x2C\xE2\x89\x99\x2C\xE2\x84\x98\x2C\xE2\x89\x80\x2C\xE2\x97\x8B\x2C\xE2\x96\xBD\x2C\xCE\x9E\x2C\xCE\xBE\x2C\xE2\x86\x94\x2C\xE2\x86\x94\x2C\xCE\x9E\x2C\xCE\xBE\x2C\xE2\x87\x90\x2C\xE2\x87\x92\x2C\xE2\x96\xB3\x2C\xC3\x9D\x2C\xC3\xBD\x2C\xD0\xAF\x2C\xD1\x8F\x2C\xC5\xB6\x2C\xC5\xB7\x2C\xD0\xAB\x2C\xD1\x8B\x2C\xC2\xA5\x2C\xD0\x87\x2C\xD1\x97\x2C\xD0\xAE\x2C\xD1\x8E\x2C\xC3\xBF\x2C\xC5\xB8\x2C\xC5\xB9\x2C\xC5\xBA\x2C\xC5\xBD\x2C\xC5\xBE\x2C\xD0\x97\x2C\xD0\xB7\x2C\xC5\xBB\x2C\xC5\xBC\x2C\xCE\x96\x2C\xCE\xB6\x2C\xCE\x96\x2C\xCE\xB6\x2C\xD0\x96\x2C\xD0\xB6\x2C\xE2\x80\x8D\x2C\xE2\x80\x8C\x2C\xE2\x82\xAC\x2C", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule